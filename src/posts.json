[{"id":1575997200,"title":"My First Post, Yo!\r","category":"Introduction \r","author":"Dave Jones \r","date":"December 11, 2019\r","content":"\r\nWelcome to My Blog. *It's a beautiful thing.* I hope you'll have as much fun reading my posts as I have writing them. Well, before we go any further, allow me to introduce myself. I'm Dave Jones. I'm 34, and from Montreal, Canada. "},{"id":1607706000,"title":" All!\r","category":"Introduction\r","author":"Susan Thomas\r","date":"December 12, 2020\r","content":"\r\nHey Everyone! *My blog is better than Dave's.*\r\n\r\nYou may know me from my other blog, \"No Sleep Till Deployment\", which is all about my life as a senior developer at a large tech company.\r\n\r\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/OH35UAqHLi0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"},{"id":1588957200,"title":"How to use Reduce in JavaScript\r","category":"No title given","author":"No author given","date":"2020-05-09\r","content":"\r\nThe [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce) function of an `Array` is one of the most versatile functions in JavaScript. With it you can accomplish a lot of the functions from the [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) and [Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math) objects. It's job is to start with an array, and reduce those elements into some other type of data... which sounds vague, but you could use it to convert from an array to an object, an array to another array, an array to a number or an array to a boolean. Understanding how it works opens up a world of possibilities.\r\n\r\n<YouTube id=\"NiLUGy1Mh4U\" />\r\n\r\nA few of the Math/Array functions we will cover in this article:\r\n\r\n- [Math.min()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min)\r\n- [Math.max()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max)\r\n- [Array.length](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length)\r\n- [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\r\n- [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)\r\n- [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every)\r\n- [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)\r\n- [Array.prototype.flat()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat)\r\n\r\n## Let's Recreate Reduce\r\n\r\nBefore we see all of reduce's flexibility, let's understand how it works! Reduce's job is to iterate over each element of an array, calling a function (callback), passing both the current element, and what is called an \"accumulator\" value. The callback's job is to take the accumulator and the array element, and return the new version of that accmulator.\r\n\r\n\r\nThis may mean taking an accumulator that is a number and returning its value + 1, or taking an accumulator which is an array and returning that array with an additional element on the end. It's up to you, depending what type of data you would like to _reduce_ your array to.\r\n\r\nWe also need an _initial value_, which will be the first value our accumulator takes before the callback is ever called.\r\n\r\n\r\n<Code language=\"Javascript\">\r\nfunction reduce(array, callback, initial) {\r\n  // start our accumulator off as the initial value\r\n  let acc = initial;\r\n  // iterate over each element in the array\r\n  for (let i = 0; i < array.length; i++) {\r\n    // pass the accumulator and current element to callback function\r\n    // override the accumulator with the callback's response\r\n    acc = callback(acc, array[i], i);\r\n  }\r\n  // return the final accumulator value\r\n  return acc;\r\n}\r\n\r\nresult = reduce([1, 2, 3], (acc, num) => acc + num, 0);\r\n</Code>\r\n\r\n\r\n## Counting Array Length\r\n\r\nThe data we are starting with is an array of objects which represent people:\r\n\r\n```js\r\nconst people = [\r\n  { id: \"1\", name: \"Leigh\", age: 35 },\r\n  { id: \"2\", name: \"Jenny\", age: 30 },\r\n  { id: \"3\", name: \"Heather\", age: 28 },\r\n];\r\n```\r\n\r\nAlthough `people.length` would be the more performant and better solution, we can count an array's length by using reduce. Our initial value is 0, and each iteration will add 1 to the previous accumulated value.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => acc + 1, 0);\r\n```\r\n\r\n## Sum Numbers\r\n\r\nWe can sum numbers using reduce. Much like the length example above, we can start with 0, and instead of adding 1 upon each iteration, we can add the `person.age` property to our accumulated value.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => acc + person.age, 0);\r\n```\r\n\r\n## Mapping with Reduce\r\n\r\nYup... you can map using reduce! In this case our initial value is an empty array, and upon each iteration we can return an array with its previous value, plus the newest value added to the end of our array.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => [...acc, person.name], []);\r\n```\r\n\r\n## Array to Object\r\n\r\nThis is a technique I use all the time when I have an array of some object with an `id`, and I want to easily access these objects by their ID, rather than having to find them in an array each time. By having an object with each person's ID as the key, I can access them using the ID's value.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => {\r\n  return { ...acc, [person.id]: person };\r\n}, {});\r\n```\r\n\r\n## Find Max Value\r\n\r\nThe `Math.max()` function can be immitated using reduce by checking if the current element's value is greater than the accumulator. If it is, that becomes (by returning the value) the new max value, otherwise the previous accumulator (current max value) is returned.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => {\r\n  if (acc === null || person.age > acc) return person.age;\r\n  return acc;\r\n}, null);\r\n```\r\n\r\n## Find Min Value\r\n\r\nThe `Math.min()` function can be immitated using reduce by checking if the current element's value is less than the accumulator. If it is, that becomes (by returning the value) the new min value, otherwise the previous accumulator (current min value) is returned.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => {\r\n  if (acc === null || person.age < acc) return person.age;\r\n  return acc;\r\n}, null);\r\n```\r\n\r\n## Find Matching Element\r\n\r\nThe reduce callback function when immitating `Array.prototype.find()` contains three possibilities:\r\n\r\n- The accumulator is not null, meaning we have already found the value, so let's return it.\r\n- The current array element meets our criteria, so let's return it.\r\n- By returning null we tell the next iteration that the value has not yet been found.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => {\r\n  if (acc !== null) return acc;\r\n  if (person.name === \"Leigh\") return person;\r\n  return null;\r\n}, null);\r\n```\r\n\r\n## Check If Every Value Matches\r\n\r\nWhen checking if every value matches a specific criteria, we will start with the assumption that every value will match... very optimistic!! If the accumulator becomes false, our callback will continue to return false, since every value must match, and otherwise will return true or false for the current element.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => {\r\n  if (!acc) return false;\r\n  return person.age > 18;\r\n}, true);\r\n```\r\n\r\n## Check If Some Value Matches\r\n\r\nChecking if some value matches a condition in our array involves a bit of pessimism. We'll start off with the assumption of `false`, and our callback function will return true as soon as the accumulator is true for the first time, and otherwise will return `true` or `false` on the current element.\r\n\r\n```js\r\nresult = people.reduce((acc, person) => {\r\n  if (acc) return true;\r\n  return person.age > 18;\r\n}, false);\r\n```\r\n\r\n## Group and Count Occurrences\r\n\r\nAs we've seen in the \"Array to Object\" example above, we can convert an array to an object, but this time we are looking to count the occurrences for a given key, in this case the `status`. Our return value will take the existing accumulated object, adding 1 for the current key's value (or initializing it to 0 if this is the first occurrence).\r\n\r\n```js\r\nconst orders = [\r\n  { id: \"1\", status: \"pending\" },\r\n  { id: \"2\", status: \"pending\" },\r\n  { id: \"3\", status: \"cancelled\" },\r\n  { id: \"4\", status: \"shipped\" },\r\n];\r\n\r\nresult = orders.reduce((acc, order) => {\r\n  return { ...acc, [order.status]: (acc[order.status] || 0) + 1 };\r\n}, {});\r\n```\r\n\r\n## Flatten Nested Arrays\r\n\r\nIn this last example we will start with an array of nested arrays, and reduce it into a flattened array of values. Because we will need to recursively reduce (flatten) arrays, we'll need to give our callback function a name (so it can be called within itself).\r\n\r\nIf the current element is an `Array`, it means we must reduce it until we arrive at at an element that can be appended to the end of the array we are producing. The _initial_ value of our inner reduce call is the _current_ accumulator value.\r\n\r\n```js\r\nconst folders = [\r\n  \"index.js\",\r\n  [\"flatten.js\", \"map.js\"],\r\n  [\"any.js\", [\"all.js\", \"count.js\"]],\r\n];\r\n\r\nfunction flatten(acc, element) {\r\n  if (Array.isArray(element)) {\r\n    return element.reduce(flatten, acc);\r\n  }\r\n  return [...acc, element];\r\n}\r\n\r\nresult = folders.reduce(flatten, []);\r\n```"},{"id":1626022800,"title":"\"Building a serverless SaaS product\"\r","category":"Development\r","author":"No author given","date":"\"2021-07-12\"\r","content":"\r\nThe [SaaS (software as a service)](https://en.wikipedia.org/wiki/Software_as_a_service) model underpins many of today's successful new businesses. Knowing how to build one from start to finish is probably a useful addition to any software developer's skill set.\r\n\r\nBut even when you strip a SaaS product of its business logic, there's still a non-trivial amount of work and trade-offs to consider.\r\n\r\nIn this project, my goal was to build a fully serverless SaaS web-app with authentication and payments — the two vital organs of any business.\r\n\r\nMy implementation is opinionated (as you'll see), and intended to serve as a starting point for new SaaS ideas in the future. Here's what's included:\r\n\r\n- [Authentication](#authentication)\r\n- [Payments (Stripe)](#payments-stripe)\r\n- [Frontend (React)](#frontend-react)\r\n- [Backend API](#backend-api)\r\n- [Serverless architecture](#serverless-architecture)\r\n- [Infrastructure as code](#infrastructure-as-code)\r\n- [CRUD operations](#crud-operations)\r\n- [Lessons Learnt](#lessons-learnt)\r\n\r\nYou can view the example at https://saas-starter-stack.com/app/ and the source on [GitHub](https://github.com/pixegami/saas-starter). In this post, I'll be reflecting on my choices and experience for each of the above features.\r\n\r\n### Authentication\r\n\r\n**Don't roll your own auth!** It's hard, and mistakes can be devastating to a business. With that said, I did it anyway — mostly to learn from it. Here's also some [discussion on Hackernews](https://news.ycombinator.com/item?id=22001918) on why you might want to build your own auth.\r\n\r\nI used [bcrypt](https://codahale.com/how-to-safely-store-a-password/) and [JSON Web Tokens](https://jwt.io/), and stored credentials on DynamoDB. That part wasn't so bad. The real grind came from building things like exponential back-offs for failed attempts, account verification and reset mechanisms, and patching all the security edge cases.\r\n\r\nI got it to a roughly working state, and then called it a day. If this was a production system, I'd probably look into something like [Cognito](https://aws.amazon.com/cognito/), [Firebase](https://firebase.google.com/products/auth) or [Okta](https://www.okta.com/).\r\n\r\n### Payments (Stripe)\r\n\r\nFrom payments integration, [Stripe](https://stripe.com) was an easy choice. No prominent alternative come to mind, and I've heard high praises about Stripe's developer onboarding experience.\r\n\r\nI set up [subscription payment](https://stripe.com/en-au/billing) integration with the project, and I think the developer experience lives up to expectations. The tutorials were well structured and concise.\r\n\r\nBut the little thing that impressed me the most was when I typed in 'test card' in a [search box](https://stripe.com/docs/testing), it actually just straight up gave me a card-number I could copy straight to my clipboard. Whoever thought of that just saved me a click, and I'm grateful.\r\n\r\n### Frontend (React)\r\n\r\nThe frontend is a responsive web-app build with [React](https://reactjs.org/). It seems like React is still the dominant technology is the area, although I've yet to try its main competitors like [Vue](https://vuejs.org/) or [Svelte](https://svelte.dev/).\r\n\r\nI used [TailWindCSS](https://tailwindcss.com/) for styling, and prefer to anything I've tried in the past (Boostrap CSS, Semantic UI and just vanilla CSS).\r\n\r\nI then used [Gatsby](https://www.gatsbyjs.com/) to optimize the static site rendering — but I'm not sure if the extra steps are worth it at this stage. It's better for SEO and performance, but costs extra development cycles.\r\n\r\nOverall though, I was quite satisfied with this stack for the frontend, and would be happy to use it for production.\r\n\r\n### Backend API\r\n\r\nThe backend is a serverless REST API implemented in Python and hosted as [Lambda functions](https://aws.amazon.com/lambda/) behind API Gateway.\r\n\r\nMy main challenge here was to abstract away the lower level things (like CORS, HTTP response formatting, database access) as much as possible. I did this via [Lambda layers](https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html), which allowed me to group a bunch of Python packages and common scripts together.\r\n\r\nThis allowed me to implement handlers that are quite short and readable, which is think is key to maintainability.\r\n\r\n### Serverless architecture\r\n\r\nWhy serverless? I think for a lot of businesses it simply wins out from a cost and scaling perspective. I could probably serve north of 500k API requests for [less than a dollar](https://aws.amazon.com/lambda/pricing/).\r\n\r\nHowever, this implies that the choice of database must be serverless as well. I chose [DynamoDB](https://aws.amazon.com/dynamodb/) just for the ease of integration. But if I had different data modeling requires (for which the DynamoDB architecture might be unfit), I might look into [Aurora](https://aws.amazon.com/rds/aurora/) or [Fauna](https://fauna.com/).\r\n\r\n### Infrastructure as code\r\n\r\nConfiguring infrastructure is time-consuming and error prone. If I want to be able to deploy a copy of this service quickly, I'd have to [model it as code (IaC)](https://en.wikipedia.org/wiki/Infrastructure_as_code). In keeping theme with my AWS integration so far, I've modeled this project with [AWS CDK](https://docs.aws.amazon.com/cdk/latest/guide/home.html) in Typescript.\r\n\r\nWith this the entire frontend and backend can be deployed to a brand new account or domain in less than 30 minutes with just a [few configuration changes](https://github.com/pixegami/saas-starter/blob/master/saas-infrastructure/service.config.json).\r\n\r\n### CRUD operations\r\n\r\nFinally, I've added some simple Twitter-like posting capabilities to the project just as a stub for the actual business logic. It has ways to interact with the authentication API, and find out whether a user is verified, and if they are a paying subscriber.\r\n\r\n## Closing Thoughts\r\n\r\nHonestly, I'm so tired of this project already. It was a lot more complex than I expected — especially for an app that really doesn't do _anything_! But I did learn a lot along the way though, and will probably be faster the second time around.\r\n\r\nMy top three takeaways are:\r\n\r\n- Don't build your own auth.\r\n- You'll probably rebuild the project at least once or twice, so design things to be flexible.\r\n- Having integration tests really paid off."}]